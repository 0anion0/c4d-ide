# Copyright (c) 2014  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import os
import sys
import c4d
import json

PROJECT_PATH  = os.path.dirname(__file__)
RESOURCE_PATH = os.path.join(PROJECT_PATH, 'res')
LIBRARY_PATH  = os.path.join(PROJECT_PATH, 'lib')
sys.path.append(LIBRARY_PATH)

# DEBUG
for key in sys.modules.keys():
    if key == 'c4dprototyping' or key.startswith('c4dprototyping.'):
        del sys.modules[key]

import c4dprototyping
from c4dprototyping.utils import image_from_file
from c4dprototyping.script import ScriptEditor, DefaultScript

__author__  = c4dprototyping.__author__
__version__ = c4dprototyping.__version__

# Load the resource symbols generated by the Makefile and
# initialize utility properties to load resource strings.
# The resource needs to be passed back to the nr_prototyping
# module.
with open(os.path.join(RESOURCE_PATH, 'symbols.json')) as fp:
    res_class = type('res', (), json.load(fp))
res_class.__getitem__ = lambda s, n: __res__.LoadString(getattr(s, n))
res_class.__call__ = lambda s, n: (getattr(s, n), s[n])
res_class.instance = __res__
res_class.file = lambda s, *p: os.path.join(RESOURCE_PATH, *p)
res = res_class()

# Initialize the nr_prototyping module with the loaded resource data.
c4dprototyping.init(res)


class OpenScriptEditor(c4d.plugins.CommandData):

    PLUGIN_ID = 1031950
    PLUGIN_NAME = res['IDC_SCRIPT_EDITOR']
    PLUGIN_HELP = res['IDC_SCRIPT_EDITOR_HELP']
    PLUGIN_INFO = 0
    PLUGIN_ICON = image_from_file(res.file('img', 'script-editor.tif'))

    @classmethod
    def Register(cls):
        return c4d.plugins.RegisterCommandPlugin(
                    cls.PLUGIN_ID, cls.PLUGIN_NAME, cls.PLUGIN_INFO,
                    cls.PLUGIN_ICON, cls.PLUGIN_HELP, cls())

    @property
    def dialog(self):
        dlg = ScriptEditor.global_instance()
        dlg.AttachScript(DefaultScript.global_instance())
        return dlg

    # c4d.plugins.CommandData

    def Execute(self, doc):
        return self.dialog.Open(c4d.DLG_TYPE_ASYNC, self.PLUGIN_ID,
                    defaultw=200, defaulth=80)

    def RestoreLayout(self, secret):
        return self.dialog.Restore(self.PLUGIN_ID, secret)

if __name__ == '__main__':
    OpenScriptEditor.Register()


